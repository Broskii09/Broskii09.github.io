<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Skin Creator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Orbitron', sans-serif;
        }
    </style>
</head>
<body class="bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 text-white min-h-screen flex flex-col items-center justify-center">
    <!-- Header -->
    <header class="text-center mb-8">
        <h1 class="text-4xl font-bold text-teal-400 mb-2">Skin Creator</h1>
        <p class="text-lg">
            <a href="https://patreon.com/ZoomingIslander" target="_blank" class="text-teal-300 hover:text-teal-500 underline">Patreon's Only</a> |
            <a href="https://guide.zoomingislander.com/custom-skins" target="_blank" class="text-teal-300 hover:text-teal-500 underline">Skin Guide</a>
        </p>
    </header>

    <!-- Form Section -->
    <div class="bg-gray-800 p-6 rounded-lg shadow-lg max-w-3xl w-full">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <!-- Color Pickers -->
            <div>
                <label for="md-color" class="block text-sm font-medium text-teal-400">Male Color</label>
                <input type="color" id="md-color" class="w-full h-12 border-2 border-teal-400 rounded-lg mt-1" value="#000000">
            </div>
            <div>
                <label for="f-color" class="block text-sm font-medium text-teal-400">High Color</label>
                <input type="color" id="f-color" class="w-full h-12 border-2 border-teal-400 rounded-lg mt-1" value="#000000">
            </div>
            <div>
                <label for="m-color" class="block text-sm font-medium text-teal-400">Mid Color</label>
                <input type="color" id="m-color" class="w-full h-12 border-2 border-teal-400 rounded-lg mt-1" value="#000000">
            </div>
            <div>
                <label for="d1-color" class="block text-sm font-medium text-teal-400">Mid 2 Color</label>
                <input type="color" id="d1-color" class="w-full h-12 border-2 border-teal-400 rounded-lg mt-1" value="#000000">
            </div>
            <div>
                <label for="b-color" class="block text-sm font-medium text-teal-400">Low Color</label>
                <input type="color" id="b-color" class="w-full h-12 border-2 border-teal-400 rounded-lg mt-1" value="#000000">
            </div>
            <div>
                <label for="u-color" class="block text-sm font-medium text-teal-400">Bottom Color</label>
                <input type="color" id="u-color" class="w-full h-12 border-2 border-teal-400 rounded-lg mt-1" value="#000000">
            </div>
            <div>
                <label for="e-color" class="block text-sm font-medium text-teal-400">Eye Color</label>
                <input type="color" id="e-color" class="w-full h-12 border-2 border-teal-400 rounded-lg mt-1" value="#000000">
            </div>
        </div>

        <!-- Numeric Inputs -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-6">
            <div>
                <label for="sv" class="block text-sm font-medium text-teal-400">Marks (sv)</label>
                <input type="number" id="sv" min="0" max="1" value="0" class="w-full p-2 border-2 border-teal-400 rounded-lg mt-1 bg-gray-700 text-white">
            </div>
            <div>
                <label for="pi" class="block text-sm font-medium text-teal-400">Pattern (pi)</label>
                <input type="number" id="pi" min="0" max="2" value="0" class="w-full p-2 border-2 border-teal-400 rounded-lg mt-1 bg-gray-700 text-white">
            </div>
        </div>

        <!-- Buttons -->
        <div class="flex flex-wrap justify-center mt-6 gap-4">
            <button class="bg-teal-400 hover:bg-teal-500 text-gray-900 font-bold py-2 px-4 rounded" onclick="generateOutput()">Generate JSON</button>
            <button class="bg-yellow-400 hover:bg-yellow-500 text-gray-900 font-bold py-2 px-4 rounded" onclick="randomizeColors()">Randomize Colors</button>
            <button class="bg-red-400 hover:bg-red-500 text-gray-900 font-bold py-2 px-4 rounded" onclick="resetColors()">Reset</button>
            <button class="bg-blue-400 hover:bg-blue-500 text-gray-900 font-bold py-2 px-4 rounded" onclick="loadFromJson()">Load JSON</button>
        </div>
    </div>

    <!-- Output Section -->
    <div id="output-container" class="hidden bg-gray-800 p-6 rounded-lg shadow-lg max-w-3xl w-full mt-6">
        <h2 class="text-xl font-bold text-teal-400 mb-4">Generated JSON</h2>
        <pre id="output" class="bg-gray-900 p-4 rounded-lg text-teal-300"></pre>
        <button class="bg-teal-400 hover:bg-teal-500 text-gray-900 font-bold py-2 px-4 rounded mt-4" onclick="copyToClipboard()">Copy to Clipboard</button>
    </div>

    <!-- Load JSON Section -->
    <div class="bg-gray-800 p-6 rounded-lg shadow-lg max-w-3xl w-full mt-6">
        <textarea id="paste-json" class="w-full h-24 p-4 rounded-lg bg-gray-900 text-white placeholder-gray-500" placeholder="Paste your JSON here"></textarea>
        <button class="bg-teal-400 hover:bg-teal-500 text-gray-900 font-bold py-2 px-4 rounded mt-4 w-full" onclick="loadFromJson()">Load JSON</button>
    </div>

    <script>
        function hexToLinearRgb(hex) {
            const bigint = parseInt(hex.slice(1), 16);
            const r = ((bigint >> 16) & 255) / 255;
            const g = ((bigint >> 8) & 255) / 255;
            const b = (bigint & 255) / 255;
            return { X: Math.pow(r, 2.2), Y: Math.pow(g, 2.2), Z: Math.pow(b, 2.2) };
        }

        function generateOutput() {
            const colors = ["md", "m", "b", "f", "u", "d1", "e"];
            const output = {
                sv: Math.max(0, Math.min(Number(document.getElementById("sv").value) || 0, 1)),
                pi: Math.max(0, Math.min(Number(document.getElementById("pi").value) || 0, 2)),
            };
            colors.forEach(key => {
                const hex = document.getElementById(`${key}-color`).value;
                const { X, Y, Z } = hexToLinearRgb(hex);
                output[key] = `X=${X.toFixed(3)},Y=${Y.toFixed(3)},Z=${Z.toFixed(3)}`;
            });
            document.getElementById("output").textContent = JSON.stringify(output, null, 2).replace(/"/g, "'");
            document.getElementById("output-container").classList.remove("hidden");
        }

        function resetColors() {
    // Reset all color pickers to black (#000000)
    const colorInputs = document.querySelectorAll("input[type='color']");
    colorInputs.forEach(input => input.value = "#000000");

    // Reset sv and pi values to their defaults
    document.getElementById("sv").value = 0;
    document.getElementById("pi").value = 0;

    // Clear the text in the JSON textarea
    document.getElementById("paste-json").value = "";

    // Clear the output JSON display
    document.getElementById("output").textContent = "";

    // Hide the output container if visible
    document.getElementById("output-container").classList.add("hidden");
}


        function randomizeColors() {
            const colorInputs = document.querySelectorAll("input[type='color']");
            colorInputs.forEach(input => input.value = `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0')}`);
        }

        function copyToClipboard() {
            const output = document.getElementById("output").textContent;
            navigator.clipboard.writeText(output).then(() => alert("Copied to clipboard!"));
        }

        function loadFromJson() {
            try {
                const input = document.getElementById("paste-json").value.replace(/'/g, '"');
                const json = JSON.parse(input);
                document.getElementById("sv").value = json.sv || 0;
                document.getElementById("pi").value = json.pi || 0;
                ["md", "m", "b", "f", "u", "d1", "e"].forEach(key => {
                    const match = json[key].match(/X=([\d.]+),Y=([\d.]+),Z=([\d.]+)/);
                    if (match) {
                        const [_, X, Y, Z] = match;
                        const r = Math.round(255 * Math.pow(parseFloat(X), 1 / 2.2));
                        const g = Math.round(255 * Math.pow(parseFloat(Y), 1 / 2.2));
                        const b = Math.round(255 * Math.pow(parseFloat(Z), 1 / 2.2));
                        document.getElementById(`${key}-color`).value = `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}`;
                    }
                });
            } catch (error) {
                alert("Invalid JSON format!");
                console.error(error);
            }
        }
    </script>
</body>
</html>
